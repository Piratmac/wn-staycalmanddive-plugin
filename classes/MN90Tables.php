<?php namespace Piratmac\Staycalmanddive\Classes;

use Winter\Storm\Exception\ValidationException as ValidationException;

/**
 * Dive calculator, a tool to calculate dive decompression stops based on MN90 tables (Marine Nationale, French Navy)
 *
 * This tool does NOT replace training, nor does it replace practical experience.
 * Do NOT trust the calculations on this website: besides changes in rules, there may still be bugs.
 * YOUR LIFE IS YOUR OWN. Do NOT put it in danger by following blindly this tool.
 *
 * This file contains the MN90 tables class, which performs the low-level calculation.
 * It is based on work from the Marine Nationale (French Navy) and dates back from 1990 (hence the name MN90).
 *
 * All depths are in meters.
 * All durations are in minutes.
 * Other units are provided in the variable's documentation.
 *
 * Requires PHP 5.3.0+ (compiled with the php_fileinfo extension), and jQuery 1.6.2+
 * Uses WinterCMS ({@link wintercms.com/})
 *
 * @author     Piratmac <piratmac@gmail.com>
 * @version    1.0.0 (last revision: December 9th, 2018)
 * @copyright  (c) 2018 - 2022 Piratmac
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE
 * @package    DiveCalculator
 */


Class MN90Tables {

  /********************************************* MN90 raw table data ***********************************/
  /************** Refer to class constructor for the value of those variables *************/

  /**
   * The main decompression table.
   * Format is  depth => [duration => [stops, GPS]]
   *
   * @var    array
   * @access public
   */
  public $stop_table = [];
  /**
   * The list of available depths in the main decompression table.
   * Useful for determination of closest available value.
   *
   * @var    array
   * @access public
   */
  public $stop_table_depths = [];
  /**
   * Table I, the residual nitrogen table.
   * Used for calculating the remaining nitrogen "tension" in the organism after a given time spend breathing air.
   * Format: GPS => [interval duration => nitrogen for each interval]
   *
   * @var    array
   * @access public
   */
  public $tableI_Residual_Nitrogen = [];
  /**
   * The list of interval durations available in table I.
   * Useful for determination of closest available value.
   *
   * @var    array
   * @access public
   */
  public $tableI_intervals = [];
  /**
   * Table II, the majoration table.
   * Used for calculating the additional time applied on the second dive, based on the residual nitrogen.
   * Format: Residual Nitrogen => [depth => majoration for each depth]
   *
   * @var    array
   * @access public
   */
  public $tableII_Majoration = [];
  /**
   * The list of depths available in table I. Useful for determination of closest available value.
   *
   * @var    array
   * @access public
   */
  public $tableII_depths = [];
  /**
   * Table III, ghe residual nitrogen table when oxygen is breathed.
   * Used for calculating the remaining nitrogen "tension" in the organism after a given time spend breathing oxygen.
   *
   * @var    array
   * @access public
   */
  public $tableIII_Residual_Nitrogen_with_Oxygen = [];
  /**
   * The list of interval durations available in table III.
   * Useful for determination of closest available value.
   *
   * @var    array
   * @access public
   */
  public $tableIII_intervals = [];


  /**
   * Value of residual nitrogen corresponding to a given GPS, without any interval.
   * This is not part of the official tables (it's actually an extract).
   * Useful for converting GPS to residual nitrogen and vice-versa.
   * Format: GPS => [residual nitrogen without any breathing]
   *
   * @var    array
   * @access public
   */
  public $GPS_to_Residual_Nitrogen = [];

  /********************************************* Calculation variables ***********************************/
  /**
   * The depth used as reference for the calculation. Corresponds to the closest DEEPER value compared to the actual depth.
   * The rounding takes the deeper value for safety reasons.
   *
   * @var    integer
   * @access public
   */
  public $depth = 0;
  /**
   * The dive duration used as reference for the calculation. Corresponds to the closest LONGER value compared to the actual duration.
   * The rounding takes the longer value for safety reasons.
   *
   * @var    integer
   * @access public
   */
  public $duration = 0;
  /**
   * The decompression stops calculated based on the rules.
   * Format: [depth => duration in minutes]
   *
   * @var    array
   * @access public
   */
  public $stops = [];

  /**
   * An array representing the elimination of nitrogen during the surface interval.
   * The key is either 'gas1' or 'gas2'.
   * The values are arrays of this format:
   *  - 'type' =>            the type of gas (air or oxygen)
   *  - 'actual_duration' => how much time is the gas breathed
   *  - 'table_duration' =>  how much time is the gas breathed, rounded down to MN90 table value
   *  - 'start_GPS' =>       the GPS at start of the breathing for that gas
   *  - 'end_GPS' =>         the GPS at end of the breathing for that gas
   *  - 'start_nitrogen' =>  the residual nitrogen at start of the breathing for that gas
   *  - 'end_nitrogen' =>    the residual nitrogen at end of the breathing for that gas
   *
   * @var    array
   * @access public
   */
  public $nitrogen_elimination = [];


  public function __construct() {
    /************************************************ Main decompression table (MN90-FFESSM, decompression with air) ***************************************/
    // Format is  depth => [duration => [stops, GPS]]
    $this->stop_table = [
                        6 => [ 15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'A'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                              105 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                              135 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                              180 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                              240 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                              315 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                              360 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                       ],
                        8 => [ 15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                              105 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                              135 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                              165 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                              195 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                              255 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'K'],
                              300 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'L'],
                              360 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'M'],
                       ],
                       10 => [ 15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                              105 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                              120 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                              135 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                              165 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'K'],
                              180 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'L'],
                              240 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'M'],
                              255 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'N'],
                              315 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'O'],
                              330 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'P'],
                              360 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'P'],
                       ],
                       12 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'A'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                               95 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                              100 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                              105 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                              110 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'K'],
                              115 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'K'],
                              120 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'K'],
                              130 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'L'],
                              135 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'L'],
                              140 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'L'],
                              150 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'M'],
                              160 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  6, 'GPS' => 'M'],
                              170 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  7, 'GPS' => 'N'],
                              180 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  9, 'GPS' => 'N'],
                              190 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 11, 'GPS' => 'N'],
                              200 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 13, 'GPS' => 'O'],
                              210 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 14, 'GPS' => 'O'],
                              220 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 15, 'GPS' => 'O'],
                              230 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 16, 'GPS' => 'O'],
                              240 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 17, 'GPS' => 'O'],
                              250 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 18, 'GPS' => 'P'],
                              255 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 19, 'GPS' => 'P'],
                              270 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 22, 'GPS' => 'P'],
                       ],
                       15 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'A'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'I'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'J'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'J'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'K'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  6, 'GPS' => 'K'],
                               95 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  8, 'GPS' => 'L'],
                              100 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 11, 'GPS' => 'L'],
                              105 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 13, 'GPS' => 'L'],
                              110 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 15, 'GPS' => 'M'],
                              115 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 17, 'GPS' => 'M'],
                              120 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 18, 'GPS' => 'M'],
                       ],
                       18 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'I'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  5, 'GPS' => 'J'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  8, 'GPS' => 'J'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 11, 'GPS' => 'K'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 14, 'GPS' => 'K'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 17, 'GPS' => 'L'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 21, 'GPS' => 'L'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 23, 'GPS' => 'M'],
                               95 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 26, 'GPS' => 'M'],
                              100 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 28, 'GPS' => 'M'],
                              105 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 31, 'GPS' => 'N'],
                              110 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 34, 'GPS' => 'N'],
                              115 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 36, 'GPS' => 'N'],
                              120 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 38, 'GPS' => 'O'],
                       ],
                       20 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'I'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'I'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  9, 'GPS' => 'J'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 13, 'GPS' => 'K'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 16, 'GPS' => 'K'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 20, 'GPS' => 'L'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 24, 'GPS' => 'L'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 27, 'GPS' => 'M'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 30, 'GPS' => 'M'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 34, 'GPS' => 'M'],
                       ],
                       22 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'F'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'G'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'H'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'I'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  7, 'GPS' => 'I'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 12, 'GPS' => 'J'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 16, 'GPS' => 'K'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 20, 'GPS' => 'K'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 25, 'GPS' => 'L'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 29, 'GPS' => 'L'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 33, 'GPS' => 'M'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 37, 'GPS' => 'M'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 41, 'GPS' => 'N'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 44, 'GPS' => 'N'],
                       ],
                       25 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'F'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'H'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  5, 'GPS' => 'I'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 10, 'GPS' => 'J'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 16, 'GPS' => 'J'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 21, 'GPS' => 'K'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 27, 'GPS' => 'L'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 32, 'GPS' => 'L'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 37, 'GPS' => 'M'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 => 41, 'GPS' => 'M'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 43, 'GPS' => 'N'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  7, 3 => 45, 'GPS' => 'N'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  9, 3 => 48, 'GPS' => 'O'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 11, 3 => 50, 'GPS' => 'O'],
                       ],
                       28 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'E'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'F'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'G'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  6, 'GPS' => 'H'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 12, 'GPS' => 'I'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 19, 'GPS' => 'J'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 25, 'GPS' => 'K'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 32, 'GPS' => 'L'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 => 36, 'GPS' => 'M'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 40, 'GPS' => 'M'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  8, 3 => 43, 'GPS' => 'N'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 11, 3 => 46, 'GPS' => 'N'],
                               75 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 14, 3 => 48, 'GPS' => 'O'],
                               80 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 17, 3 => 50, 'GPS' => 'O'],
                               85 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 20, 3 => 53, 'GPS' => 'O'],
                               90 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 23, 3 => 56, 'GPS' => 'P'],
                       ],
                       30 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'E'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'F'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'H'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  9, 'GPS' => 'I'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 17, 'GPS' => 'J'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 24, 'GPS' => 'K'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 => 31, 'GPS' => 'L'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  3, 3 => 36, 'GPS' => 'M'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  6, 3 => 39, 'GPS' => 'M'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 10, 3 => 43, 'GPS' => 'N'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 14, 3 => 46, 'GPS' => 'N'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 17, 3 => 48, 'GPS' => 'O'],
                       ],
                       32 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'B'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'E'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  3, 'GPS' => 'G'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  6, 'GPS' => 'H'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 14, 'GPS' => 'I'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 22, 'GPS' => 'K'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 => 29, 'GPS' => 'K'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 34, 'GPS' => 'L'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  7, 3 => 39, 'GPS' => 'M'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 11, 3 => 43, 'GPS' => 'N'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 15, 3 => 46, 'GPS' => 'N'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 19, 3 => 48, 'GPS' => 'O'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 23, 3 => 50, 'GPS' => 'O'],
                       ],
                       35 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'F'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  5, 'GPS' => 'H'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 => 11, 'GPS' => 'I'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 => 20, 'GPS' => 'J'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 => 27, 'GPS' => 'K'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  5, 3 => 34, 'GPS' => 'L'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  9, 3 => 39, 'GPS' => 'M'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 14, 3 => 43, 'GPS' => 'N'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 18, 3 => 47, 'GPS' => 'N'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 22, 3 => 50, 'GPS' => 'O'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  2, 6 => 26, 3 => 52, 'GPS' => '*'],
                               70 => [15 =>  0, 12 =>  0, 9 =>  4, 6 => 28, 3 => 57, 'GPS' => '*'],
                       ],
                       38 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'E'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'F'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  8, 'GPS' => 'H'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 => 16, 'GPS' => 'J'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  3, 3 => 24, 'GPS' => 'K'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  5, 3 => 33, 'GPS' => 'L'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 10, 3 => 38, 'GPS' => 'M'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 15, 3 => 43, 'GPS' => 'N'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 20, 3 => 47, 'GPS' => 'N'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  2, 6 => 23, 3 => 50, 'GPS' => 'O'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  5, 6 => 27, 3 => 53, 'GPS' => 'P'],
                               65 => [15 =>  0, 12 =>  0, 9 =>  8, 6 => 29, 3 => 58, 'GPS' => '*'],
                               70 => [15 =>  0, 12 =>  0, 9 => 11, 6 => 31, 3 => 62, 'GPS' => '*'],
                       ],
                       40 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'E'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'G'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 =>  9, 'GPS' => 'H'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 => 19, 'GPS' => 'J'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 28, 'GPS' => 'K'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  8, 3 => 35, 'GPS' => 'L'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 13, 3 => 40, 'GPS' => 'M'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  1, 6 => 18, 3 => 45, 'GPS' => 'N'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  2, 6 => 23, 3 => 48, 'GPS' => 'O'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  5, 6 => 26, 3 => 52, 'GPS' => 'O'],
                               60 => [15 =>  0, 12 =>  0, 9 =>  8, 6 => 29, 3 => 57, 'GPS' => 'P'],
                               65 => [15 =>  0, 12 =>  0, 9 => 12, 6 => 31, 3 => 61, 'GPS' => '*'],
                               70 => [15 =>  0, 12 =>  0, 9 => 15, 6 => 33, 3 => 66, 'GPS' => '*'],
                       ],
                       42 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'E'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  5, 'GPS' => 'G'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 => 12, 'GPS' => 'I'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  3, 3 => 22, 'GPS' => 'J'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  6, 3 => 31, 'GPS' => 'L'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  0, 6 => 11, 3 => 37, 'GPS' => 'M'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  1, 6 => 16, 3 => 43, 'GPS' => 'N'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  3, 6 => 21, 3 => 47, 'GPS' => '*'],
                               50 => [15 =>  0, 12 =>  0, 9 =>  6, 6 => 24, 3 => 50, 'GPS' => '*'],
                               55 => [15 =>  0, 12 =>  0, 9 =>  8, 6 => 29, 3 => 55, 'GPS' => '*'],
                               60 => [15 =>  0, 12 =>  0, 9 => 13, 6 => 30, 3 => 60, 'GPS' => '*'],
                       ],
                       45 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'C'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  3, 'GPS' => 'F'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 =>  6, 'GPS' => 'H'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  3, 3 => 15, 'GPS' => 'I'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  5, 3 => 25, 'GPS' => 'K'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  9, 3 => 35, 'GPS' => 'L'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  1, 6 => 15, 3 => 40, 'GPS' => 'M'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  3, 6 => 20, 3 => 46, 'GPS' => 'N'],
                               45 => [15 =>  0, 12 =>  0, 9 =>  6, 6 => 24, 3 => 50, 'GPS' => '*'],
                               50 => [15 =>  0, 12 =>  0, 9 => 10, 6 => 28, 3 => 54, 'GPS' => '*'],
                               55 => [15 =>  0, 12 =>  0, 9 => 14, 6 => 30, 3 => 60, 'GPS' => '*'],
                               60 => [15 =>  0, 12 =>  1, 9 => 18, 6 => 32, 3 => 65, 'GPS' => '*'],
                       ],
                       48 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  0, 'GPS' => 'D'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'F'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 =>  7, 'GPS' => 'H'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 19, 'GPS' => 'J'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  7, 3 => 30, 'GPS' => 'K'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  1, 6 => 12, 3 => 37, 'GPS' => 'M'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  3, 6 => 18, 3 => 44, 'GPS' => 'N'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  6, 6 => 23, 3 => 48, 'GPS' => 'O'],
                               45 => [15 =>  0, 12 =>  0, 9 => 10, 6 => 27, 3 => 53, 'GPS' => '*'],
                               50 => [15 =>  0, 12 =>  1, 9 => 14, 6 => 30, 3 => 59, 'GPS' => '*'],
                               55 => [15 =>  0, 12 =>  2, 9 => 18, 6 => 32, 3 => 64, 'GPS' => '*'],
                               60 => [15 =>  0, 12 =>  5, 9 => 19, 6 => 36, 3 => 70, 'GPS' => '*'],
                       ],
                       50 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'D'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  4, 'GPS' => 'F'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 =>  9, 'GPS' => 'H'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 22, 'GPS' => 'J'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  1, 6 =>  8, 3 => 32, 'GPS' => 'L'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  2, 6 => 14, 3 => 39, 'GPS' => 'M'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  5, 6 => 20, 3 => 45, 'GPS' => 'N'],
                               40 => [15 =>  0, 12 =>  0, 9 =>  9, 6 => 24, 3 => 50, 'GPS' => 'O'],
                               45 => [15 =>  0, 12 =>  1, 9 => 12, 6 => 29, 3 => 55, 'GPS' => '*'],
                               50 => [15 =>  0, 12 =>  2, 9 => 17, 6 => 30, 3 => 62, 'GPS' => '*'],
                               55 => [15 =>  0, 12 =>  5, 9 => 19, 6 => 34, 3 => 67, 'GPS' => '*'],
                       ],
                       52 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'D'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 =>  4, 'GPS' => 'F'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  3, 3 => 10, 'GPS' => 'I'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  1, 6 =>  5, 3 => 23, 'GPS' => 'K'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  2, 6 =>  9, 3 => 34, 'GPS' => 'L'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  4, 6 => 15, 3 => 41, 'GPS' => 'M'],
                               35 => [15 =>  0, 12 =>  0, 9 =>  6, 6 => 22, 3 => 47, 'GPS' => 'O'],
                               40 => [15 =>  0, 12 =>  1, 9 => 10, 6 => 26, 3 => 52, 'GPS' => 'O'],
                               45 => [15 =>  0, 12 =>  2, 9 => 15, 6 => 29, 3 => 59, 'GPS' => '*'],
                               50 => [15 =>  0, 12 =>  5, 9 => 17, 6 => 32, 3 => 64, 'GPS' => '*'],
                               55 => [15 =>  0, 12 =>  8, 9 => 19, 6 => 36, 3 => 71, 'GPS' => '*'],
                       ],
                       55 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  1, 'GPS' => 'D'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  1, 3 =>  5, 'GPS' => 'G'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  4, 3 => 13, 'GPS' => 'I'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  1, 6 =>  6, 3 => 27, 'GPS' => 'K'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  3, 6 => 11, 3 => 37, 'GPS' => 'M'],
                               30 => [15 =>  0, 12 =>  0, 9 =>  6, 6 => 18, 3 => 44, 'GPS' => 'N'],
                               35 => [15 =>  0, 12 =>  1, 9 =>  9, 6 => 23, 3 => 50, 'GPS' => 'O'],
                               40 => [15 =>  0, 12 =>  3, 9 => 12, 6 => 29, 3 => 55, 'GPS' => 'P'],
                               45 => [15 =>  0, 12 =>  5, 9 => 17, 6 => 31, 3 => 62, 'GPS' => '*'],
                               50 => [15 =>  0, 12 =>  8, 9 => 19, 6 => 35, 3 => 69, 'GPS' => '*'],
                               55 => [15 =>  0, 12 => 12, 9 => 22, 6 => 37, 3 => 76, 'GPS' => '*'],
                       ],
                       58 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'D'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 =>  5, 'GPS' => 'G'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  1, 6 =>  4, 3 => 16, 'GPS' => 'J'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  2, 6 =>  7, 3 => 30, 'GPS' => 'K'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  4, 6 => 13, 3 => 40, 'GPS' => 'M'],
                               30 => [15 =>  0, 12 =>  1, 9 =>  7, 6 => 21, 3 => 46, 'GPS' => 'N'],
                               35 => [15 =>  0, 12 =>  2, 9 => 11, 6 => 26, 3 => 52, 'GPS' => 'O'],
                               40 => [15 =>  0, 12 =>  5, 9 => 15, 6 => 30, 3 => 59, 'GPS' => 'P'],
                               45 => [15 =>  0, 12 =>  8, 9 => 18, 6 => 33, 3 => 66, 'GPS' => '*'],
                               50 => [15 =>  1, 12 => 11, 9 => 21, 6 => 37, 3 => 74, 'GPS' => '*'],
                               55 => [15 =>  3, 12 => 14, 9 => 23, 6 => 39, 3 => 83, 'GPS' => '*'],
                       ],
                       60 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => 'D'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 =>  6, 'GPS' => 'G'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  1, 6 =>  4, 3 => 19, 'GPS' => 'J'],
                               20 => [15 =>  0, 12 =>  0, 9 =>  3, 6 =>  8, 3 => 32, 'GPS' => 'L'],
                               25 => [15 =>  0, 12 =>  0, 9 =>  5, 6 => 15, 3 => 41, 'GPS' => 'M'],
                               30 => [15 =>  0, 12 =>  1, 9 =>  8, 6 => 22, 3 => 48, 'GPS' => 'O'],
                               35 => [15 =>  0, 12 =>  4, 9 => 11, 6 => 28, 3 => 54, 'GPS' => 'P'],
                               40 => [15 =>  0, 12 =>  6, 9 => 17, 6 => 30, 3 => 62, 'GPS' => 'P'],
                               45 => [15 =>  1, 12 =>  9, 9 => 19, 6 => 35, 3 => 69, 'GPS' => '*'],
                               50 => [15 =>  2, 12 => 13, 9 => 22, 6 => 37, 3 => 78, 'GPS' => '*'],
                               55 => [15 =>  5, 12 => 15, 9 => 24, 6 => 40, 3 => 88, 'GPS' => '*'],
                       ],
                       62 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  2, 'GPS' => '*'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  2, 3 =>  7, 'GPS' => '*'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  1, 6 =>  5, 3 => 21, 'GPS' => '*'],
                       ],
                       65 => [  5 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  0, 3 =>  3, 'GPS' => '*'],
                               10 => [15 =>  0, 12 =>  0, 9 =>  0, 6 =>  3, 3 =>  8, 'GPS' => '*'],
                               15 => [15 =>  0, 12 =>  0, 9 =>  2, 6 =>  5, 3 => 24, 'GPS' => '*'],
                       ],
                ];
    $this->stop_table_depths = array_keys($this->stop_table);

    /************************************************ Table I: Residual Nitrogen (given a GPS and duration) ***************************************/
    // Final format: GPS => [interval duration => nitrogen for each interval]
    $this->tableI_intervals = [  0,   15,   30,   45,   60,   90,  120,  150,  180,  210,  240,  270,  300,  330,  360,  390,  420,  450,  480,  510,  540,  570,  600,  630,  660,  690,  720];
    $tableI_Residual_Nitrogen = [
                      'A' => [0.84, 0.84, 0.83, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'B' => [0.89, 0.88, 0.88, 0.87, 0.86, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'C' => [0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'D' => [0.98, 0.97, 0.95, 0.94, 0.93, 0.91, 0.89, 0.88, 0.86, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'E' => [1.02, 1.00, 0.98, 0.97, 0.96, 0.93, 0.91, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'F' => [1.07, 1.05, 1.03, 1.01, 0.99, 0.96, 0.94, 0.91, 0.90, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'G' => [1.11, 1.08, 1.06, 1.04, 1.02, 0.98, 0.96, 0.93, 0.91, 0.89, 0.88, 0.87, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'H' => [1.16, 1.13, 1.10, 1.08, 1.05, 1.01, 0.98, 0.95, 0.93, 0.91, 0.89, 0.88, 0.86, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'I' => [1.20, 1.17, 1.14, 1.11, 1.08, 1.04, 1.00, 0.97, 0.94, 0.92, 0.90, 0.88, 0.87, 0.86, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'J' => [1.24, 1.20, 1.17, 1.14, 1.11, 1.06, 1.02, 0.98, 0.96, 0.93, 0.91, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81],
                      'K' => [1.29, 1.25, 1.21, 1.18, 1.15, 1.09, 1.04, 1.01, 0.97, 0.95, 0.92, 0.90, 0.89, 0.87, 0.86, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81],
                      'L' => [1.33, 1.29, 1.25, 1.21, 1.17, 1.12, 1.07, 1.02, 0.99, 0.96, 0.93, 0.91, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81],
                      'M' => [1.38, 1.33, 1.29, 1.25, 1.21, 1.14, 1.09, 1.04, 1.01, 0.97, 0.94, 0.92, 0.90, 0.89, 0.87, 0.86, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81],
                      'N' => [1.42, 1.37, 1.32, 1.28, 1.24, 1.17, 1.11, 1.06, 1.02, 0.98, 0.95, 0.93, 0.91, 0.89, 0.88, 0.87, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81],
                      'O' => [1.47, 1.41, 1.36, 1.32, 1.27, 1.20, 1.13, 1.08, 1.04, 1.00, 0.97, 0.94, 0.92, 0.90, 0.88, 0.87, 0.86, 0.85, 0.84, 0.84, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81],
                      'P' => [1.51, 1.45, 1.40, 1.35, 1.30, 1.22, 1.15, 1.10, 1.05, 1.01, 0.98, 0.95, 0.93, 0.91, 0.89, 0.87, 0.86, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.81, 0.81],
    ];
    // Formatting it with intervals included
    foreach ($tableI_Residual_Nitrogen as $GPS => $residual_nitrogen) {
      foreach ($residual_nitrogen as $interval_number => $value) {
        $this->tableI_Residual_Nitrogen[$GPS][$this->tableI_intervals[$interval_number]] = $value;
      }
    }

    /************************************************ Table II : Majoration to use for second dive ***************************************/
    // Final format: Residual Nitrogen => [depth => majoration for each depth]
    $this->tableII_depths  =    [ 12,  15,  18,  20,  22,  25,  28,  30,  32,  35,  38,  40,  42,  45,  48,  50,  52,  55,  58,  60  ];
    $tableII_Majoration = [
                      '0.82' => [  4,   3,   2,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1, ],
                      '0.84' => [  7,   6,   5,   4,   4,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1, ],
                      '0.86' => [ 11,   9,   7,   7,   6,   5,   5,   4,   4,   4,   3,   3,   3,   3,   3,   3,   3,   2,   2,   2, ],
                      '0.89' => [ 17,  13,  11,  10,   9,   8,   7,   7,   6,   6,   5,   5,   5,   4,   4,   4,   4,   4,   3,   3, ],
                      '0.92' => [ 23,  18,  15,  13,  12,  11,  10,   9,   8,   8,   7,   7,   6,   6,   5,   5,   5,   5,   5,   4, ],
                      '0.95' => [ 29,  23,  19,  17,  15,  13,  12,  11,  10,  10,   9,   8,   8,   7,   7,   7,   6,   6,   6,   5, ],
                      '0.99' => [ 38,  30,  24,  22,  20,  17,  15,  14,  13,  12,  11,  11,  10,   9,   9,   8,   8,   8,   7,   7, ],
                      '1.03' => [ 47,  37,  30,  27,  24,  21,  19,  17,  16,  15,  14,  13,  12,  11,  11,  10,  10,   9,   9,   9, ],
                      '1.07' => [ 57,  44,  36,  32,  29,  25,  22,  21,  19,  18,  16,  15,  15,  13,  13,  12,  12,  11,  10,  10, ],
                      '1.11' => [ 68,  52,  42,  37,  34,  29,  26,  24,  22,  20,  19,  18,  17,  16,  15,  14,  13,  13,  12,  12, ],
                      '1.16' => [ 81,  62,  50,  44,  40,  34,  30,  28,  26,  24,  22,  21,  20,  18,  17,  16,  16,  15,  14,  13, ],
                      '1.20' => [ 93,  70,  56,  50,  45,  39,  34,  32,  29,  27,  24,  23,  22,  20,  19,  18,  18,  17,  16,  15, ],
                      '1.24' => [106,  79,  63,  56,  50,  43,  38,  35,  33,  30,  27,  26,  24,  23,  21,  20,  19,  18,  17,  17, ],
                      '1.29' => [124,  91,  72,  63,  56,  49,  43,  40,  37,  33,  30,  29,  27,  25,  24,  23,  22,  20,  19,  19, ],
                      '1.33' => [139, 101,  79,  70,  62,  53,  47,  43,  40,  36,  33,  31,  30,  28,  26,  25,  24,  22,  21,  20, ],
                      '1.38' => [160, 114,  89,  78,  69,  59,  52,  48,  44,  40,  37,  35,  33,  30,  28,  27,  26,  24,  23,  22, ],
                      '1.42' => [180, 126,  97,  85,  75,  64,  56,  52,  48,  43,  39,  37,  35,  33,  30,  29,  28,  26,  25,  24, ],
                      '1.45' => [196, 135, 104,  90,  80,  68,  59,  55,  51,  46,  42,  39,  37,  34,  32,  31,  29,  28,  26,  25, ],
    ];
    // Formatting it with depths included
    foreach ($tableII_Majoration as $residual_nitrogen => $majoration_list) {
      foreach ($majoration_list as $depth_number => $value) {
        $this->tableII_Majoration[$residual_nitrogen][$this->tableII_depths[$depth_number]] = $value;
      }
    }

    /************************************************ Table III: Residual Nitrogen when Oxygen is breathed at surface ***************************************/
    // Format: GPS => [residual nitrogen with Oxygen breathing]
    $this->tableIII_intervals = [    0,   15,   30,   45,   60,   75,   90,  105,  120,  135,  150,  165,  180,  195,  210, ];
    $tableIII_Residual_Nitrogen_with_Oxygen = [
                          'A' => [0.84, 0.80],
                          'B' => [0.89, 0.85, 0.82, 0.79],
                          'C' => [0.93, 0.89, 0.85, 0.82, 0.79],
                          'D' => [0.98, 0.94, 0.90, 0.86, 0.82, 0.80],
                          'E' => [1.02, 0.98, 0.94, 0.90, 0.86, 0.82, 0.80],
                          'F' => [1.07, 1.02, 0.98, 0.94, 0.90, 0.86, 0.83, 0.80],
                          'G' => [1.11, 1.06, 1.02, 0.97, 0.93, 0.90, 0.86, 0.82, 0.80],
                          'H' => [1.16, 1.11, 1.06, 1.02, 0.97, 0.93, 0.89, 0.86, 0.82, 0.80],
                          'I' => [1.20, 1.15, 1.10, 1.05, 1.01, 0.97, 0.93, 0.89, 0.85, 0.81, 0.80],
                          'J' => [1.24, 1.19, 1.14, 1.09, 1.04, 1.00, 0.96, 0.92, 0.89, 0.86, 0.81, 0.79],
                          'K' => [1.29, 1.24, 1.18, 1.13, 1.08, 1.04, 0.99, 0.95, 0.91, 0.87, 0.84, 0.80],
                          'L' => [1.33, 1.27, 1.22, 1.17, 1.12, 1.07, 1.03, 0.99, 0.94, 0.91, 0.86, 0.83, 0.79],
                          'M' => [1.38, 1.32, 1.27, 1.21, 1.16, 1.11, 1.06, 1.02, 0.98, 0.93, 0.89, 0.86, 0.82, 0.79],
                          'N' => [1.42, 1.36, 1.30, 1.25, 1.19, 1.14, 1.09, 1.05, 1.00, 0.96, 0.92, 0.88, 0.84, 0.81, 0.79],
                          'O' => [1.47, 1.41, 1.35, 1.29, 1.24, 1.19, 1.13, 1.09, 1.04, 1.00, 0.95, 0.91, 0.88, 0.84, 0.80],
                          'P' => [1.51, 1.45, 1.38, 1.33, 1.27, 1.22, 1.16, 1.11, 1.07, 1.02, 0.98, 0.94, 0.90, 0.86, 0.82],
    ];
    // Formatting it with intervals included
    foreach ($tableIII_Residual_Nitrogen_with_Oxygen as $GPS => $residual_nitrogen) {
      foreach ($residual_nitrogen as $interval_number => $value) {
        $this->tableIII_Residual_Nitrogen_with_Oxygen[$GPS][$this->tableIII_intervals[$interval_number]] = $value;
      }
    }

    /************************************************ Not an official table, but practical to determine GPS versus residual nitrogen ***************************************/
    // Format: GPS => [residual nitrogen without any breathing]
    $this->GPS_to_Residual_Nitrogen = [
                          'A' => 0.84,
                          'B' => 0.89,
                          'C' => 0.93,
                          'D' => 0.98,
                          'E' => 1.02,
                          'F' => 1.07,
                          'G' => 1.11,
                          'H' => 1.16,
                          'I' => 1.20,
                          'J' => 1.24,
                          'K' => 1.29,
                          'L' => 1.33,
                          'M' => 1.38,
                          'N' => 1.42,
                          'O' => 1.4,
                          'P' => 1.51,
    ];
  }


  /*
   * Calculates the stops to perform given dive characteristics
   *
   * @param  float   $depth          The maximum depth of the dive
   * @param  integer $duration       The duration at the bottom of the dive (excluding majoration and ascent time)
   * @param  array   $gas_at_depth   The gas mix that is breathed during the dive (excluding stops and surface). Format: 'type' => 'air' or 'nitrox', 'O2_ratio' => oxygen ratio in % (21 = 21% of O2)
   * @param  array   $gas_at_stops   The gas mix that is breathed during the decompression stops (may be air or oxygen) Format: 'type' => 'air' or 'oxygen', 'O2_ratio' => oxygen ratio in % (21 = 21% of O2)
   *
   * @return void
   */
  public function getStopsForDive ($depth, $duration, $atmospheric_pressure, $air_nitrogen_ratio, $gas_at_depth = ['type' => 'air', 'O2_ratio' => 21], $gas_at_stops = ['type' => 'air', 'O2_ratio' => 21]) {
    // Adjusting the calculation for Nitrox & altitude
    $this->depth_for_calculation = $this->adjustDepthForNitroxAndAltitude($depth, $gas_at_depth, $atmospheric_pressure, $air_nitrogen_ratio);

    // Get depths
    $this->depth = $this->chooseValueBasedOnCondition($this->stop_table_depths, $this->depth_for_calculation, 'above');
    if ($this->depth === false)
      throw new ValidationException (trans('piratmac.staycalmanddive::lang.calculation.errors.too_deep_for_tables'));

    // Get duration in the table
    $this->duration = $this->chooseValueBasedOnCondition(array_keys($this->stop_table[$this->depth]), $duration, 'above');
    if ($this->duration === false)
      throw new ValidationException (trans('piratmac.staycalmanddive::lang.calculation.errors.too_long_for_tables'));

    // Get actual stops, then separate GPS from the rest
    $this->stops = $this->stop_table[$this->depth][$this->duration];
    $this->GPS = $this->stops['GPS'];
    unset($this->stops['GPS']);

    // Change duration if Oxygen is breathed during the decompression (at 6m or 3m)
    $this->stops = $this->adjustStopsForOxygen($this->stops, $gas_at_stops);

    // Change stops based on altitude
    $this->stops = $this->adjustStopsForAltitude($this->stops, $atmospheric_pressure);
  }


  /*
   * Calculates the equivalent MAX depth given a Nitrox mix and an atmospheric pressure (for altitude). Rounded up to 0.1m for safety.
   *
   * Based on MN90 table rules:
   * - For Nitrox:   Equivalent depth = Actual depth * percentage of Nitrogen in Nitrox / 0.79 [the depth is reduced because there is less Nitrogen, therefore less risk]
   * - For Altitude: Equivalent depth = Actual depth / atmospheric pressure [the depth is augmented because the pressure ratio between at depth and at surface must remain the same]
   *
   * @param  float   $depth                  The maximum depth of the dive
   * @param  array   $gas_at_depth           The gas mix that is breathed during the dive (excluding stops and surface)
   * @param  float   $atmospheric_pressure   The atmospheric pressure (in bar) at the surface
   *
   * @return float   $depth                  The equivalent air depth to use for calculation
   */
  public function adjustDepthForNitroxAndAltitude ($depth, $gas_at_depth, $atmospheric_pressure, $air_nitrogen_ratio) {
    // Adjusting the calculation for Nitrox (this calculation doesn't check if it's safe to go at that depth)
    if ($gas_at_depth['type'] == 'nitrox') {
      return ceil(( ($depth + 10) * (100 - $gas_at_depth['O2_ratio']) / $air_nitrogen_ratio - 10 )/ $atmospheric_pressure*10)/10;
    }
    else return ceil($depth / $atmospheric_pressure*10)/10;
  }



  /*
   * Calculates the equivalent STOP depth given an atmospheric pressure (for altitude). Rounded up to 0.1m for safety.
   *
   * Based on MN90 table rules:
   * - For Altitude: Equivalent stop depth = Actual depth * atmospheric pressure [the depth is reduced because the pressure ratio between at depth and at stop must remain the same]
   *
   * @param  array   $stops                  The stops calculated before adjustment
   * @param  float   $atmospheric_pressure   The atmospheric pressure (in bar) at the surface
   *
   * @return float   $adjusted_stops         The modified stops
   */
  private function adjustStopsForAltitude ($stops, $atmospheric_pressure) {
    // Change altitude of stops if in altitude
    $adjusted_stops = [];
    foreach ($stops as $depth => $duration)
      $adjusted_stops[$depth * $atmospheric_pressure] = $duration;
    return $adjusted_stops;
  }


  /*
   * Calculates the stop duration if Oxygen is breathed at 6 or 3m (lower depths are dangerous). Rounded up to 0.1m for safety.
   *
   * Based on MN90 table rules:
   * - If stop is below 5 minutes: perform same duration as if it was air
   * - If stop is above 5 minutes: calculate the 2/3 of the duration. If that duration is below 5 minutes: do 5 minutes. Otherwise, do the calculated duration.
   * - In other words: if duration <= 7.5 minutes: do 5 minutes. Otherwise, do 2/3 of the duration.
   *
   * @param  array   $stops                  The stops calculated before adjustment
   * @param  array   $gas_at_stops           The gas mix that is breathed during the decompression stops (may be air or oxygen)
   *
   * @return float   $stops                  The modified stops
   */
  private function adjustStopsForOxygen ($stops, $gas_at_stops) {
    // Change duration if Oxygen is breathed during the decompression (at 6m or 3m)
    if ($gas_at_stops['type'] == 'oxygen') {
      foreach ($stops as $depth => $duration) {
        if ($depth <= 6) {
          if ($duration > 5 && $duration <= 7.5)
            $stops[$depth] = 5;
          elseif ($duration > 7.5)
            $stops[$depth] = ceil($duration * 2 / 3);
        }
      }
    }
    return $stops;
  }



  /*
   * Calculates the residual Nitrogen after surface decompression
   *
   * Based on MN90 table rules:
   * - If air is breathed: use table I to determine residual nitrogen. If exact interval doesn't exist: use closest value that is BELOW the actual duration.
   * - If oxygen is breathed: use table III to determine residual nitrogen. If exact interval doesn't exist: use closest value that is BELOW the actual duration.
   * - If there is a mix of gas: use rule for 1st gas. Then determine an equivalent GPS (based on table III, use closest value that is ABOVE the actuel residual nitrogen). Use that GPS for the second gas. Each gas should be calculated based on above rules with its actual duration.
   *
   * @param  string  $GPS                    The GPS (consecutive dive group) at the start of the interval
   * @param  integer $interval_duration      The total duration of the surface interval
   * @param  array   $interval_oxygen        If Oxygen is breathed, the duration and when it's breathed
   *
   * @return void
   */
  public function getResidualNitrogen ($GPS, $interval_duration, $interval_oxygen = ['duration' => 0, 'when' => 'start']) {
    if ($GPS == '*')
      throw new ValidationException (trans('piratmac.staycalmanddive::lang.calculation.errors.GPS_is_star'));

    // Calculate surface gas mix
    $surface_gas_mix = $this->getSurfaceGasMix($GPS, $interval_duration, $interval_oxygen);
    $this->nitrogen_elimination = $surface_gas_mix;

    // The actual calculation
    foreach ($surface_gas_mix as $gas_count => $gas_details) {
      // Get additional details based on previous calculation
      $gas_details = $this->nitrogen_elimination[$gas_count];
      if ($gas_details['type'] == 'air')
        $table_to_use = $this->tableI_Residual_Nitrogen;
      else
        $table_to_use = $this->tableIII_Residual_Nitrogen_with_Oxygen;

      $residual_nitrogen_table_for_GPS = $table_to_use[$gas_details['start_GPS']];

      $table_duration = $this->chooseValueBasedOnCondition(array_keys($residual_nitrogen_table_for_GPS), $gas_details['actual_duration'], 'below');
      $end_nitrogen = $residual_nitrogen_table_for_GPS[$table_duration];
      $GPS_above_actual = array_filter($this->GPS_to_Residual_Nitrogen, function($v) use ($end_nitrogen) { return $v >= $end_nitrogen; });
      // Since the array was never read before, this should give us its first element, aka lowest GPS that is above the one we want
      $end_GPS = key($GPS_above_actual);

      $this->nitrogen_elimination[$gas_count]['table_duration'] = $table_duration;
      $this->nitrogen_elimination[$gas_count]['end_nitrogen']   = $end_nitrogen;
      $this->nitrogen_elimination[$gas_count]['end_GPS']        = $end_GPS;

      if ($gas_count == 'gas1' && isset($this->nitrogen_elimination['gas2'])) {
        $this->nitrogen_elimination['gas2']['start_GPS']      = $end_GPS;
        $this->nitrogen_elimination['gas2']['start_nitrogen'] = $end_nitrogen;
      }
    }
  }




  /*
   * Calculates the gas mix during the interval, given its total duration and the oxygen breathing details
   *
   * @param  string  $GPS                    The GPS (consecutive dive group) at the start of the interval
   * @param  integer $interval_duration      The total duration of the surface interval
   * @param  array   $interval_oxygen        If Oxygen is breathed, the duration and when it's breathed
   *
   * @return array   $surface_gas_mix        The gas mix used (either 1 or 2 gases)
   */
  private function getSurfaceGasMix ($GPS, $interval_duration, $interval_oxygen) {
    $gas_structure = [
     'type' => '',
     'actual_duration' => 0,
     'table_duration' => 0,
     'start_GPS' => '',
     'end_GPS' => '',
     'start_nitrogen' => '',
     'end_nitrogen' => '',
    ];

    // Calculate for air breathing
    if ($interval_oxygen['duration'] == 0) {
      $surface_gas_mix = ['gas1' => $gas_structure];
      $surface_gas_mix['gas1'] = array_merge($surface_gas_mix['gas1'], [
          'type' => 'air',
          'actual_duration' => $interval_duration,
          'start_GPS' => $GPS,
          'start_nitrogen' => $this->tableIII_Residual_Nitrogen_with_Oxygen[$GPS][0],
        ]
      );
    }
    elseif ($interval_oxygen['duration'] == $interval_duration) {
      $surface_gas_mix = ['gas1' => $gas_structure];
      $surface_gas_mix['gas1'] = array_merge($surface_gas_mix['gas1'], [
          'type' => 'oxygen',
          'actual_duration' => $interval_duration,
          'start_GPS' => $GPS,
          'start_nitrogen' => $this->tableIII_Residual_Nitrogen_with_Oxygen[$GPS][0],
        ]
      );
    }
    else {
      // Basic structure of the data
      $surface_gas_mix = ['gas1' => $gas_structure, 'gas2' => $gas_structure];

      // Adding start data
      $surface_gas_mix['gas1'] = array_merge($surface_gas_mix['gas1'], [
          'start_GPS' => $GPS,
          'start_nitrogen' => $this->tableIII_Residual_Nitrogen_with_Oxygen[$GPS][0],
        ]
      );


      // Adding gas mix
      $air =    ['type' => 'air',    'actual_duration' => $interval_duration - $interval_oxygen['duration']];
      $oxygen = ['type' => 'oxygen', 'actual_duration' => $interval_oxygen['duration']];
      if ($interval_oxygen['when'] == 'start') {
        $surface_gas_mix['gas1'] = array_merge($surface_gas_mix['gas1'], $oxygen);
        $surface_gas_mix['gas2'] = array_merge($surface_gas_mix['gas2'], $air);
      }
      else {
        $surface_gas_mix['gas1'] = array_merge($surface_gas_mix['gas1'], $air);
        $surface_gas_mix['gas2'] = array_merge($surface_gas_mix['gas2'], $oxygen);
      }
      if ($surface_gas_mix['gas1']['actual_duration'] == 0) {
        $surface_gas_mix['gas2'] = $surface_gas_mix['gas1'];
        unset($surface_gas_mix['gas2']);
      }
      elseif ($surface_gas_mix['gas2']['actual_duration'] == 0)
        unset($surface_gas_mix['gas2']);
    }

    return $surface_gas_mix;
  }


  /*
   * Calculates the majoration to apply on the second dive
   *
   * @param  float   $residual_nitrogen      The residual nitrogen after 1st dive and surface interval
   * @param  integer $depth_of_second_dive   The depth of the second dive
   *
   * @return void
   */
  public function getMajoration ($residual_nitrogen, $depth_of_second_dive) {
    // Get the residual nitrogen value to use for table reading (must be above actual one)
    $this->tableII_residual_nitrogen = $this->chooseValueBasedOnCondition(array_keys($this->tableII_Majoration), $residual_nitrogen, 'above');
    if ($this->tableII_residual_nitrogen === false)
      throw new ValidationException (trans('piratmac.staycalmanddive::lang.calculation.errors.residual_nitrogen_too_high'));

    // Get the depth to use for table reading (must be below actual one)
    $this->tableII_depth = $this->chooseValueBasedOnCondition(array_keys($this->tableII_Majoration[$this->tableII_residual_nitrogen]), $depth_of_second_dive, 'above');
    if ($this->tableII_depth === false)
      // Second dive is too shallow (less than 12 m deep) for MN90 to care about it
      $this->tableII_depth = $this->majoration = 0;
    else
      $this->majoration = $this->tableII_Majoration[$this->tableII_residual_nitrogen][$this->tableII_depth];
  }



  /*
   * Helper function to filter data. Gets the closest value of $array that is above or below $real_value
   *
   * @param  array   $array                  The array in which to search
   * @param  float   $real_value             The value to search in the array
   * @param  string  $above_or_below         Whether the returned value should be above or below the actual one
   *
   * @return variant                         Either false (when no value matches) or the actual value
   */
  private function chooseValueBasedOnCondition (array $array, float $real_value, string $above_or_below) {
    if ($above_or_below == 'above') {
      $filtered_array = array_filter($array, function($v) use ($real_value) { return $v >= $real_value; });
      if (count($filtered_array) == 0)
        return false;
      return min($filtered_array);
    }
    elseif ($above_or_below == 'below') {
      $filtered_array = array_filter($array, function($v) use ($real_value) { return $v <= $real_value; });
      if (count($filtered_array) == 0)
        return false;
      return max($filtered_array);
    }
    return false;
  }

}

?>